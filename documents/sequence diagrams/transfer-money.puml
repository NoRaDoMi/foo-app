@startuml transfer-money
hide footbox
actor "Sender"
actor "Receiver"
control "Server"
database "MySQL"
database "Redis"
"Sender" -> "Server": API TransferMoney
"Server" -> "MySQL": selectUserById(senderId)
"MySQL" --> "Server": return user

group validate request
"Server" -> "Server": validate password
  alt password is invalid
  "Server" --> "Sender": INVALID_PASSWORD
  end
  "Server" -> "Server": validate amount
  alt amount is invalid
  "Server" --> "Sender": INVALID_INPUT_MONEY
  end
  "Server" -> "MySQL": selectUserId(receiverId)
  "MySQL" --> "Server": return user
  "Server" -> "Server": validate receiverId
  alt receiverId is not found
  "Server" --> "Sender": USER_ID_NOT_FOUND
  end
end

group handle transfer money
  group transfer money transaction
    "Server" -> "MySQL": start transaction
    "Server" -> "MySQL": selectUsersForUpdate(senderId,receiverId)
    "MySQL" --> "Server": return sender & receiver
    "Server" -> "Server" : check amount <= sender's balance
    alt  amount > balance
    "Server" --> "Sender": NOT_ENOUGH_MONEY
    end
    "Server" -> "MySQL" : decrease A's balance by amount
    "MySQL" --> "Server": ack
    "Server" -> "MySQL" : increase B's balance by amount
    "MySQL" --> "Server": ack
    "Server" -> "MySQL" : insert to transfer log
    "MySQL" --> "Server": ack
    "Server" -> "MySQL" : insert to A's account log
    "MySQL" --> "Server": ack
    "Server" -> "MySQL" : insert to B's account log
    "MySQL" --> "Server": ack
    "Server" -> "Redis": cache transaction history
    "Redis" --> "Server": ack
    "Server" -> "MySQL" : commit
    end
    "Server" --> "Sender": return new balance
    "Server" -> "Receiver" : notify new trasfer
end
@enduml