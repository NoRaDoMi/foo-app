// source: fintech.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var fintech_status_pb = require('./status_pb.js');
goog.object.extend(proto, fintech_status_pb);
goog.exportSymbol('proto.fintech.GetBalanceRequest', null, global);
goog.exportSymbol('proto.fintech.GetBalanceResponse', null, global);
goog.exportSymbol('proto.fintech.GetBalanceResponse.Data', null, global);
goog.exportSymbol('proto.fintech.GetHistoryRequest', null, global);
goog.exportSymbol('proto.fintech.GetHistoryResponse', null, global);
goog.exportSymbol('proto.fintech.GetHistoryResponse.Data', null, global);
goog.exportSymbol('proto.fintech.TransactionHistory', null, global);
goog.exportSymbol('proto.fintech.TransactionHistory.TransferType', null, global);
goog.exportSymbol('proto.fintech.TransferMoneyRequest', null, global);
goog.exportSymbol('proto.fintech.TransferMoneyResponse', null, global);
goog.exportSymbol('proto.fintech.TransferMoneyResponse.Data', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.GetBalanceRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.GetBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.GetBalanceRequest.displayName = 'proto.fintech.GetBalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.GetBalanceResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.GetBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.GetBalanceResponse.displayName = 'proto.fintech.GetBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.GetBalanceResponse.Data = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.GetBalanceResponse.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.GetBalanceResponse.Data.displayName = 'proto.fintech.GetBalanceResponse.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.TransferMoneyRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.TransferMoneyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.TransferMoneyRequest.displayName = 'proto.fintech.TransferMoneyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.TransferMoneyResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.TransferMoneyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.TransferMoneyResponse.displayName = 'proto.fintech.TransferMoneyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.TransferMoneyResponse.Data = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.TransferMoneyResponse.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.TransferMoneyResponse.Data.displayName = 'proto.fintech.TransferMoneyResponse.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.GetHistoryRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.GetHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.GetHistoryRequest.displayName = 'proto.fintech.GetHistoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.TransactionHistory = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.TransactionHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.TransactionHistory.displayName = 'proto.fintech.TransactionHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.GetHistoryResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fintech.GetHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.GetHistoryResponse.displayName = 'proto.fintech.GetHistoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fintech.GetHistoryResponse.Data = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.fintech.GetHistoryResponse.Data.repeatedFields_, null);
};
goog.inherits(proto.fintech.GetHistoryResponse.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
   * @public
   * @override
   */
	proto.fintech.GetHistoryResponse.Data.displayName = 'proto.fintech.GetHistoryResponse.Data';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.GetBalanceRequest.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.GetBalanceRequest.toObject = function(includeInstance, msg) {
		var f,
			obj = {};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.GetBalanceRequest}
 */
proto.fintech.GetBalanceRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.GetBalanceRequest();
	return proto.fintech.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.GetBalanceRequest}
 */
proto.fintech.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.GetBalanceRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.GetBalanceRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.GetBalanceResponse.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.GetBalanceResponse.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				data: (f = msg.getData()) && proto.fintech.GetBalanceResponse.Data.toObject(includeInstance, f),
				status: (f = msg.getStatus()) && fintech_status_pb.Status.toObject(includeInstance, f)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.GetBalanceResponse}
 */
proto.fintech.GetBalanceResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.GetBalanceResponse();
	return proto.fintech.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.GetBalanceResponse}
 */
proto.fintech.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.fintech.GetBalanceResponse.Data();
				reader.readMessage(value, proto.fintech.GetBalanceResponse.Data.deserializeBinaryFromReader);
				msg.setData(value);
				break;
			case 2:
				var value = new fintech_status_pb.Status();
				reader.readMessage(value, fintech_status_pb.Status.deserializeBinaryFromReader);
				msg.setStatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.GetBalanceResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.GetBalanceResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getData();
	if (f != null) {
		writer.writeMessage(1, f, proto.fintech.GetBalanceResponse.Data.serializeBinaryToWriter);
	}
	f = message.getStatus();
	if (f != null) {
		writer.writeMessage(2, f, fintech_status_pb.Status.serializeBinaryToWriter);
	}
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.GetBalanceResponse.Data.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.GetBalanceResponse.Data.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.GetBalanceResponse.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.GetBalanceResponse.Data.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				balance: jspb.Message.getFieldWithDefault(msg, 1, 0),
				lastUpdated: jspb.Message.getFieldWithDefault(msg, 2, 0)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.GetBalanceResponse.Data}
 */
proto.fintech.GetBalanceResponse.Data.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.GetBalanceResponse.Data();
	return proto.fintech.GetBalanceResponse.Data.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.GetBalanceResponse.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.GetBalanceResponse.Data}
 */
proto.fintech.GetBalanceResponse.Data.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value /** @type {number} */ = reader.readInt64();
				msg.setBalance(value);
				break;
			case 2:
				var value /** @type {number} */ = reader.readInt64();
				msg.setLastUpdated(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.GetBalanceResponse.Data.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.GetBalanceResponse.Data.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.GetBalanceResponse.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.GetBalanceResponse.Data.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getBalance();
	if (f !== 0) {
		writer.writeInt64(1, f);
	}
	f = message.getLastUpdated();
	if (f !== 0) {
		writer.writeInt64(2, f);
	}
};

/**
 * optional int64 balance = 1;
 * @return {number}
 */
proto.fintech.GetBalanceResponse.Data.prototype.getBalance = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.GetBalanceResponse.Data} returns this
 */
proto.fintech.GetBalanceResponse.Data.prototype.setBalance = function(value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 last_updated = 2;
 * @return {number}
 */
proto.fintech.GetBalanceResponse.Data.prototype.getLastUpdated = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.GetBalanceResponse.Data} returns this
 */
proto.fintech.GetBalanceResponse.Data.prototype.setLastUpdated = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional Data data = 1;
 * @return {?proto.fintech.GetBalanceResponse.Data}
 */
proto.fintech.GetBalanceResponse.prototype.getData = function() {
	return /** @type{?proto.fintech.GetBalanceResponse.Data} */ jspb.Message.getWrapperField(
		this,
		proto.fintech.GetBalanceResponse.Data,
		1
	);
};

/**
 * @param {?proto.fintech.GetBalanceResponse.Data|undefined} value
 * @return {!proto.fintech.GetBalanceResponse} returns this
*/
proto.fintech.GetBalanceResponse.prototype.setData = function(value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.fintech.GetBalanceResponse} returns this
 */
proto.fintech.GetBalanceResponse.prototype.clearData = function() {
	return this.setData(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fintech.GetBalanceResponse.prototype.hasData = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Status status = 2;
 * @return {?proto.fintech.Status}
 */
proto.fintech.GetBalanceResponse.prototype.getStatus = function() {
	return /** @type{?proto.fintech.Status} */ jspb.Message.getWrapperField(this, fintech_status_pb.Status, 2);
};

/**
 * @param {?proto.fintech.Status|undefined} value
 * @return {!proto.fintech.GetBalanceResponse} returns this
*/
proto.fintech.GetBalanceResponse.prototype.setStatus = function(value) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.fintech.GetBalanceResponse} returns this
 */
proto.fintech.GetBalanceResponse.prototype.clearStatus = function() {
	return this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fintech.GetBalanceResponse.prototype.hasStatus = function() {
	return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.TransferMoneyRequest.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.TransferMoneyRequest.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.TransferMoneyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.TransferMoneyRequest.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				confirmPassword: jspb.Message.getFieldWithDefault(msg, 1, ''),
				receiver: jspb.Message.getFieldWithDefault(msg, 2, ''),
				amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
				description: jspb.Message.getFieldWithDefault(msg, 4, '')
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.TransferMoneyRequest}
 */
proto.fintech.TransferMoneyRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.TransferMoneyRequest();
	return proto.fintech.TransferMoneyRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.TransferMoneyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.TransferMoneyRequest}
 */
proto.fintech.TransferMoneyRequest.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value /** @type {string} */ = reader.readString();
				msg.setConfirmPassword(value);
				break;
			case 2:
				var value /** @type {string} */ = reader.readString();
				msg.setReceiver(value);
				break;
			case 3:
				var value /** @type {number} */ = reader.readInt64();
				msg.setAmount(value);
				break;
			case 4:
				var value /** @type {string} */ = reader.readString();
				msg.setDescription(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.TransferMoneyRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.TransferMoneyRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.TransferMoneyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.TransferMoneyRequest.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getConfirmPassword();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getReceiver();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getAmount();
	if (f !== 0) {
		writer.writeInt64(3, f);
	}
	f = message.getDescription();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
};

/**
 * optional string confirm_password = 1;
 * @return {string}
 */
proto.fintech.TransferMoneyRequest.prototype.getConfirmPassword = function() {
	return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, '');
};

/**
 * @param {string} value
 * @return {!proto.fintech.TransferMoneyRequest} returns this
 */
proto.fintech.TransferMoneyRequest.prototype.setConfirmPassword = function(value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string receiver = 2;
 * @return {string}
 */
proto.fintech.TransferMoneyRequest.prototype.getReceiver = function() {
	return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, '');
};

/**
 * @param {string} value
 * @return {!proto.fintech.TransferMoneyRequest} returns this
 */
proto.fintech.TransferMoneyRequest.prototype.setReceiver = function(value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.fintech.TransferMoneyRequest.prototype.getAmount = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.TransferMoneyRequest} returns this
 */
proto.fintech.TransferMoneyRequest.prototype.setAmount = function(value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string description = 4;
 * @return {string}
 */
proto.fintech.TransferMoneyRequest.prototype.getDescription = function() {
	return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, '');
};

/**
 * @param {string} value
 * @return {!proto.fintech.TransferMoneyRequest} returns this
 */
proto.fintech.TransferMoneyRequest.prototype.setDescription = function(value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.TransferMoneyResponse.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.TransferMoneyResponse.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.TransferMoneyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.TransferMoneyResponse.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				data: (f = msg.getData()) && proto.fintech.TransferMoneyResponse.Data.toObject(includeInstance, f),
				status: (f = msg.getStatus()) && fintech_status_pb.Status.toObject(includeInstance, f)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.TransferMoneyResponse}
 */
proto.fintech.TransferMoneyResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.TransferMoneyResponse();
	return proto.fintech.TransferMoneyResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.TransferMoneyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.TransferMoneyResponse}
 */
proto.fintech.TransferMoneyResponse.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.fintech.TransferMoneyResponse.Data();
				reader.readMessage(value, proto.fintech.TransferMoneyResponse.Data.deserializeBinaryFromReader);
				msg.setData(value);
				break;
			case 2:
				var value = new fintech_status_pb.Status();
				reader.readMessage(value, fintech_status_pb.Status.deserializeBinaryFromReader);
				msg.setStatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.TransferMoneyResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.TransferMoneyResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.TransferMoneyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.TransferMoneyResponse.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getData();
	if (f != null) {
		writer.writeMessage(1, f, proto.fintech.TransferMoneyResponse.Data.serializeBinaryToWriter);
	}
	f = message.getStatus();
	if (f != null) {
		writer.writeMessage(2, f, fintech_status_pb.Status.serializeBinaryToWriter);
	}
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.TransferMoneyResponse.Data.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.TransferMoneyResponse.Data.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.TransferMoneyResponse.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.TransferMoneyResponse.Data.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				balance: jspb.Message.getFieldWithDefault(msg, 1, 0),
				lastUpdated: jspb.Message.getFieldWithDefault(msg, 2, 0),
				transaction: (f = msg.getTransaction()) && proto.fintech.TransactionHistory.toObject(includeInstance, f)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.TransferMoneyResponse.Data}
 */
proto.fintech.TransferMoneyResponse.Data.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.TransferMoneyResponse.Data();
	return proto.fintech.TransferMoneyResponse.Data.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.TransferMoneyResponse.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.TransferMoneyResponse.Data}
 */
proto.fintech.TransferMoneyResponse.Data.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value /** @type {number} */ = reader.readInt64();
				msg.setBalance(value);
				break;
			case 2:
				var value /** @type {number} */ = reader.readInt64();
				msg.setLastUpdated(value);
				break;
			case 3:
				var value = new proto.fintech.TransactionHistory();
				reader.readMessage(value, proto.fintech.TransactionHistory.deserializeBinaryFromReader);
				msg.setTransaction(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.TransferMoneyResponse.Data.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.TransferMoneyResponse.Data.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.TransferMoneyResponse.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.TransferMoneyResponse.Data.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getBalance();
	if (f !== 0) {
		writer.writeInt64(1, f);
	}
	f = message.getLastUpdated();
	if (f !== 0) {
		writer.writeInt64(2, f);
	}
	f = message.getTransaction();
	if (f != null) {
		writer.writeMessage(3, f, proto.fintech.TransactionHistory.serializeBinaryToWriter);
	}
};

/**
 * optional int64 balance = 1;
 * @return {number}
 */
proto.fintech.TransferMoneyResponse.Data.prototype.getBalance = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.TransferMoneyResponse.Data} returns this
 */
proto.fintech.TransferMoneyResponse.Data.prototype.setBalance = function(value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 last_updated = 2;
 * @return {number}
 */
proto.fintech.TransferMoneyResponse.Data.prototype.getLastUpdated = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.TransferMoneyResponse.Data} returns this
 */
proto.fintech.TransferMoneyResponse.Data.prototype.setLastUpdated = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional TransactionHistory transaction = 3;
 * @return {?proto.fintech.TransactionHistory}
 */
proto.fintech.TransferMoneyResponse.Data.prototype.getTransaction = function() {
	return /** @type{?proto.fintech.TransactionHistory} */ jspb.Message.getWrapperField(
		this,
		proto.fintech.TransactionHistory,
		3
	);
};

/**
 * @param {?proto.fintech.TransactionHistory|undefined} value
 * @return {!proto.fintech.TransferMoneyResponse.Data} returns this
*/
proto.fintech.TransferMoneyResponse.Data.prototype.setTransaction = function(value) {
	return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.fintech.TransferMoneyResponse.Data} returns this
 */
proto.fintech.TransferMoneyResponse.Data.prototype.clearTransaction = function() {
	return this.setTransaction(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fintech.TransferMoneyResponse.Data.prototype.hasTransaction = function() {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Data data = 1;
 * @return {?proto.fintech.TransferMoneyResponse.Data}
 */
proto.fintech.TransferMoneyResponse.prototype.getData = function() {
	return /** @type{?proto.fintech.TransferMoneyResponse.Data} */ jspb.Message.getWrapperField(
		this,
		proto.fintech.TransferMoneyResponse.Data,
		1
	);
};

/**
 * @param {?proto.fintech.TransferMoneyResponse.Data|undefined} value
 * @return {!proto.fintech.TransferMoneyResponse} returns this
*/
proto.fintech.TransferMoneyResponse.prototype.setData = function(value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.fintech.TransferMoneyResponse} returns this
 */
proto.fintech.TransferMoneyResponse.prototype.clearData = function() {
	return this.setData(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fintech.TransferMoneyResponse.prototype.hasData = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Status status = 2;
 * @return {?proto.fintech.Status}
 */
proto.fintech.TransferMoneyResponse.prototype.getStatus = function() {
	return /** @type{?proto.fintech.Status} */ jspb.Message.getWrapperField(this, fintech_status_pb.Status, 2);
};

/**
 * @param {?proto.fintech.Status|undefined} value
 * @return {!proto.fintech.TransferMoneyResponse} returns this
*/
proto.fintech.TransferMoneyResponse.prototype.setStatus = function(value) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.fintech.TransferMoneyResponse} returns this
 */
proto.fintech.TransferMoneyResponse.prototype.clearStatus = function() {
	return this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fintech.TransferMoneyResponse.prototype.hasStatus = function() {
	return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.GetHistoryRequest.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.GetHistoryRequest.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.GetHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.GetHistoryRequest.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
				pageToken: jspb.Message.getFieldWithDefault(msg, 3, 0)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.GetHistoryRequest}
 */
proto.fintech.GetHistoryRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.GetHistoryRequest();
	return proto.fintech.GetHistoryRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.GetHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.GetHistoryRequest}
 */
proto.fintech.GetHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 2:
				var value /** @type {number} */ = reader.readInt32();
				msg.setPageSize(value);
				break;
			case 3:
				var value /** @type {number} */ = reader.readInt32();
				msg.setPageToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.GetHistoryRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.GetHistoryRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.GetHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.GetHistoryRequest.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getPageSize();
	if (f !== 0) {
		writer.writeInt32(2, f);
	}
	f = message.getPageToken();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
};

/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.fintech.GetHistoryRequest.prototype.getPageSize = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.GetHistoryRequest} returns this
 */
proto.fintech.GetHistoryRequest.prototype.setPageSize = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 page_token = 3;
 * @return {number}
 */
proto.fintech.GetHistoryRequest.prototype.getPageToken = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.GetHistoryRequest} returns this
 */
proto.fintech.GetHistoryRequest.prototype.setPageToken = function(value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.TransactionHistory.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.TransactionHistory.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.TransactionHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.TransactionHistory.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
				amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
				description: jspb.Message.getFieldWithDefault(msg, 3, ''),
				recordedTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
				transferType: jspb.Message.getFieldWithDefault(msg, 5, 0)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.TransactionHistory}
 */
proto.fintech.TransactionHistory.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.TransactionHistory();
	return proto.fintech.TransactionHistory.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.TransactionHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.TransactionHistory}
 */
proto.fintech.TransactionHistory.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value /** @type {string} */ = reader.readString();
				msg.setUserId(value);
				break;
			case 2:
				var value /** @type {number} */ = reader.readInt64();
				msg.setAmount(value);
				break;
			case 3:
				var value /** @type {string} */ = reader.readString();
				msg.setDescription(value);
				break;
			case 4:
				var value /** @type {number} */ = reader.readInt64();
				msg.setRecordedTime(value);
				break;
			case 5:
				var value /** @type {!proto.fintech.TransactionHistory.TransferType} */ = reader.readEnum();
				msg.setTransferType(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.TransactionHistory.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.TransactionHistory.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.TransactionHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.TransactionHistory.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getUserId();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getAmount();
	if (f !== 0) {
		writer.writeInt64(2, f);
	}
	f = message.getDescription();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getRecordedTime();
	if (f !== 0) {
		writer.writeInt64(4, f);
	}
	f = message.getTransferType();
	if (f !== 0.0) {
		writer.writeEnum(5, f);
	}
};

/**
 * @enum {number}
 */
proto.fintech.TransactionHistory.TransferType = {
	SEND: 0,
	RECEIVE: 1
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.fintech.TransactionHistory.prototype.getUserId = function() {
	return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, '');
};

/**
 * @param {string} value
 * @return {!proto.fintech.TransactionHistory} returns this
 */
proto.fintech.TransactionHistory.prototype.setUserId = function(value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.fintech.TransactionHistory.prototype.getAmount = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.TransactionHistory} returns this
 */
proto.fintech.TransactionHistory.prototype.setAmount = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string description = 3;
 * @return {string}
 */
proto.fintech.TransactionHistory.prototype.getDescription = function() {
	return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, '');
};

/**
 * @param {string} value
 * @return {!proto.fintech.TransactionHistory} returns this
 */
proto.fintech.TransactionHistory.prototype.setDescription = function(value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int64 recorded_time = 4;
 * @return {number}
 */
proto.fintech.TransactionHistory.prototype.getRecordedTime = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.TransactionHistory} returns this
 */
proto.fintech.TransactionHistory.prototype.setRecordedTime = function(value) {
	return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional TransferType transfer_type = 5;
 * @return {!proto.fintech.TransactionHistory.TransferType}
 */
proto.fintech.TransactionHistory.prototype.getTransferType = function() {
	return /** @type {!proto.fintech.TransactionHistory.TransferType} */ jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {!proto.fintech.TransactionHistory.TransferType} value
 * @return {!proto.fintech.TransactionHistory} returns this
 */
proto.fintech.TransactionHistory.prototype.setTransferType = function(value) {
	return jspb.Message.setProto3EnumField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.GetHistoryResponse.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.GetHistoryResponse.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.GetHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.GetHistoryResponse.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				data: (f = msg.getData()) && proto.fintech.GetHistoryResponse.Data.toObject(includeInstance, f),
				status: (f = msg.getStatus()) && fintech_status_pb.Status.toObject(includeInstance, f)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.GetHistoryResponse}
 */
proto.fintech.GetHistoryResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.GetHistoryResponse();
	return proto.fintech.GetHistoryResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.GetHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.GetHistoryResponse}
 */
proto.fintech.GetHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.fintech.GetHistoryResponse.Data();
				reader.readMessage(value, proto.fintech.GetHistoryResponse.Data.deserializeBinaryFromReader);
				msg.setData(value);
				break;
			case 2:
				var value = new fintech_status_pb.Status();
				reader.readMessage(value, fintech_status_pb.Status.deserializeBinaryFromReader);
				msg.setStatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.GetHistoryResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.GetHistoryResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.GetHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.GetHistoryResponse.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getData();
	if (f != null) {
		writer.writeMessage(1, f, proto.fintech.GetHistoryResponse.Data.serializeBinaryToWriter);
	}
	f = message.getStatus();
	if (f != null) {
		writer.writeMessage(2, f, fintech_status_pb.Status.serializeBinaryToWriter);
	}
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fintech.GetHistoryResponse.Data.repeatedFields_ = [ 1 ];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
	proto.fintech.GetHistoryResponse.Data.prototype.toObject = function(opt_includeInstance) {
		return proto.fintech.GetHistoryResponse.Data.toObject(opt_includeInstance, this);
	};

	/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fintech.GetHistoryResponse.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
	proto.fintech.GetHistoryResponse.Data.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				itemsList: jspb.Message.toObjectList(
					msg.getItemsList(),
					proto.fintech.TransactionHistory.toObject,
					includeInstance
				),
				nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, 0)
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fintech.GetHistoryResponse.Data}
 */
proto.fintech.GetHistoryResponse.Data.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.fintech.GetHistoryResponse.Data();
	return proto.fintech.GetHistoryResponse.Data.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fintech.GetHistoryResponse.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fintech.GetHistoryResponse.Data}
 */
proto.fintech.GetHistoryResponse.Data.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.fintech.TransactionHistory();
				reader.readMessage(value, proto.fintech.TransactionHistory.deserializeBinaryFromReader);
				msg.addItems(value);
				break;
			case 2:
				var value /** @type {number} */ = reader.readInt32();
				msg.setNextPageToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fintech.GetHistoryResponse.Data.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.fintech.GetHistoryResponse.Data.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fintech.GetHistoryResponse.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fintech.GetHistoryResponse.Data.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getItemsList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(1, f, proto.fintech.TransactionHistory.serializeBinaryToWriter);
	}
	f = message.getNextPageToken();
	if (f !== 0) {
		writer.writeInt32(2, f);
	}
};

/**
 * repeated TransactionHistory items = 1;
 * @return {!Array<!proto.fintech.TransactionHistory>}
 */
proto.fintech.GetHistoryResponse.Data.prototype.getItemsList = function() {
	return /** @type{!Array<!proto.fintech.TransactionHistory>} */ jspb.Message.getRepeatedWrapperField(
		this,
		proto.fintech.TransactionHistory,
		1
	);
};

/**
 * @param {!Array<!proto.fintech.TransactionHistory>} value
 * @return {!proto.fintech.GetHistoryResponse.Data} returns this
*/
proto.fintech.GetHistoryResponse.Data.prototype.setItemsList = function(value) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.fintech.TransactionHistory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fintech.TransactionHistory}
 */
proto.fintech.GetHistoryResponse.Data.prototype.addItems = function(opt_value, opt_index) {
	return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fintech.TransactionHistory, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fintech.GetHistoryResponse.Data} returns this
 */
proto.fintech.GetHistoryResponse.Data.prototype.clearItemsList = function() {
	return this.setItemsList([]);
};

/**
 * optional int32 next_page_token = 2;
 * @return {number}
 */
proto.fintech.GetHistoryResponse.Data.prototype.getNextPageToken = function() {
	return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!proto.fintech.GetHistoryResponse.Data} returns this
 */
proto.fintech.GetHistoryResponse.Data.prototype.setNextPageToken = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional Data data = 1;
 * @return {?proto.fintech.GetHistoryResponse.Data}
 */
proto.fintech.GetHistoryResponse.prototype.getData = function() {
	return /** @type{?proto.fintech.GetHistoryResponse.Data} */ jspb.Message.getWrapperField(
		this,
		proto.fintech.GetHistoryResponse.Data,
		1
	);
};

/**
 * @param {?proto.fintech.GetHistoryResponse.Data|undefined} value
 * @return {!proto.fintech.GetHistoryResponse} returns this
*/
proto.fintech.GetHistoryResponse.prototype.setData = function(value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.fintech.GetHistoryResponse} returns this
 */
proto.fintech.GetHistoryResponse.prototype.clearData = function() {
	return this.setData(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fintech.GetHistoryResponse.prototype.hasData = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Status status = 2;
 * @return {?proto.fintech.Status}
 */
proto.fintech.GetHistoryResponse.prototype.getStatus = function() {
	return /** @type{?proto.fintech.Status} */ jspb.Message.getWrapperField(this, fintech_status_pb.Status, 2);
};

/**
 * @param {?proto.fintech.Status|undefined} value
 * @return {!proto.fintech.GetHistoryResponse} returns this
*/
proto.fintech.GetHistoryResponse.prototype.setStatus = function(value) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.fintech.GetHistoryResponse} returns this
 */
proto.fintech.GetHistoryResponse.prototype.clearStatus = function() {
	return this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fintech.GetHistoryResponse.prototype.hasStatus = function() {
	return jspb.Message.getField(this, 2) != null;
};

goog.object.extend(exports, proto.fintech);
